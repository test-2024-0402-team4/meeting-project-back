<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.meeteam4.meeting.repository.UserMapper">

    <resultMap id="RoleResultMap" type="com.meeteam4.meeting.entity.Role">
        <id property="roleId" column="role_id" />
        <result property="roleName" column="role_name" />
        <result property="roleNameKor" column="rloe_name_kor" />
    </resultMap>

    <resultMap id="RoleRegisterResultMap" type="com.meeteam4.meeting.entity.RoleRegister">
        <id property="roleRegisterId" column="role_register_id" />
        <result property="userId" column="user_id" />
        <result property="roleId" column="role_id"/>
        <association property="role" resultMap="RoleResultMap"/>
    </resultMap>

    <resultMap id="UserResultMap" type="com.meeteam4.meeting.entity.User">
        <id property="userId" column="user_id" />
        <result property="name" column="name" />
        <result property="username" column="username" />
        <result property="password" column="password" />
        <result property="nickname" column="nickname" />
        <result property="email" column="email" />
        <result property="roleId" column="role_id" />
        <result property="createDate" column="create_date" />
        <result property="updateDate" column="update_date" />
        <association property="teacher" resultMap="TeacherResultMap"/>
        <association property="student" resultMap="StudentResultMap"/>
        <collection property="roleRegisters" javaType="List" resultMap="RoleRegisterResultMap" />
    </resultMap>

    <resultMap id="StudentResultMap" type="com.meeteam4.meeting.entity.Student">
        <id property="studentId" column="student_id" />
        <result property="userId" column="user_id"/>
        <result property="birthDate" column="birth_date"/>
        <result property="genderId" column="gender_id"/>
        <result property="studentTypeId" column="student_type_id"/>
        <result property="phoneNumber" column="phone_number"/>
        <result property="regionId" column="region_id"/>
        <result property="createDate" column="create_date"/>
        <result property="updateDate" column="update_date"/>
    </resultMap>

    <resultMap id="TeacherResultMap" type="com.meeteam4.meeting.entity.Teacher">
        <id property="teacherId" column="teacher_id" />
        <result property="userId" column="user_id"/>
        <result property="birthDate" column="birth_date"/>
        <result property="genderId" column="gender_id"/>
        <result property="universityId" column="university_id"/>
        <result property="departmentName" column="department_name"/>
        <result property="graduateStateId" column="graduate_state_id"/>
        <result property="phoneNumber" column="phone_number"/>
        <result property="createDate" column="create_date"/>
        <result property="updateDate" column="update_date"/>
    </resultMap>

    <insert id="saveUser"
            parameterType="com.meeteam4.meeting.entity.User"
            keyProperty="userId"
            useGeneratedKeys="true"
    >
        insert into
            user_tb
        values
            (0, #{name}, #{username}, #{password}, #{nickname}, #{email}, #{roleId}, now(), now());
    </insert>

    <insert id="saveStudent"
            parameterType="com.meeteam4.meeting.entity.Student"
            keyProperty="studentId"
            useGeneratedKeys="true"
    >
        insert into
            student_tb
        values
            (0, #{userId}, #{birthDate}, #{genderId}, #{studentTypeId}, #{phoneNumber}, #{regionId}, now(), now());
    </insert>

    <insert id="saveTeacher"
            parameterType="com.meeteam4.meeting.entity.Teacher"
            keyProperty="teacherId"
            useGeneratedKeys="true"
    >
        insert into
            teacher_tb
        values
            (0, #{userId}, #{birthDate}, #{genderId}, #{universityId}, #{departmentName}, #{graduateStateId}, #{phoneNumber}, now(), now());
    </insert>

    <insert id="saveRole"
            parameterType="integer"
    >
        insert into
            role_register_tb
        values
            (0, #{userId}, #{roleId}, now(), now())
    </insert>

    <insert id="saveOAuth2" parameterType="com.meeteam4.meeting.entity.OAuth2">
        insert into
            oauth2_tb
        values
            (0, #{oAuth2Name}, #{userId}, #{providerName}, now(), now())
    </insert>



    <select id="findByUsername"
            parameterType="String"
            resultMap="UserResultMap"
    >
        select
            ut.user_id,
            ut.username,
            ut.password,
            ut.name,
            ut.email,
            ut.create_date,
            ut.update_date,
            rrt.role_register_id,
            rrt.role_id,
            rt.role_name,
            rt.role_name_kor,
            tt.teacher_id,
            st.student_id
        from
            user_tb ut
            left outer join role_register_tb rrt on(rrt.user_id = ut.user_id)
            left outer join role_tb rt on(rt.role_id = rrt.role_id)
            left outer join teacher_tb tt on(tt.user_id = ut.user_id)
            left outer join student_tb st on(st.user_id = ut.user_id)
        where
            username = #{username}
    </select>

    <select id="findByNickname"
            parameterType="String"
            resultMap="UserResultMap"
    >
        select
            ut.user_id,
            ut.username,
            ut.password,
            ut.name,
            ut.nickname,
            ut.email,
            ut.create_date,
            ut.update_date,
            tt.teacher_id,
            st.student_id
        from
            user_tb ut
            left outer join student_tb st on(st.user_id = ut.user_id)
            left outer join teacher_tb tt on(tt.user_id = ut.user_id)
        where
            ut.nickname = #{nickname}
    </select>

    <select id="findByEmail"
            parameterType="String"
            resultMap="UserResultMap"
    >
        select
            ut.user_id,
            ut.username,
            ut.password,
            ut.name,
            ut.email,
            ut.create_date,
            ut.update_date,
            tt.teacher_id,
            st.student_id
        from
            user_tb ut
            left outer join student_tb st on(st.user_id = ut.user_id)
            left outer join teacher_tb tt on(tt.user_id = ut.user_id)
        where
            ut.email = #{email}
    </select>

    <select id="findUserByOAuth2Name" resultMap="UserResultMap">
        select
            ut.user_id,
            ut.username,
            ut.password,
            ut.name,
            ut.email,
            ut.create_date,
            ut.update_date,
            rrt.role_register_id,
            rrt.role_id,
            rt.role_name,
            rt.role_name_kor,
            oat.oauth2_id,
            oat.oauth2_name,
            oat.provider_name
        from
            user_tb ut
            left outer join role_register_tb rrt on(rrt.user_id = ut.user_id)
            left outer join role_tb rt on(rt.role_id = rrt.role_id)
            left outer join oauth2_tb oat on(oat.user_id = ut.user_id)
        where
            oat.oauth2_name = #{oAuth2Name}
    </select>

    <select id="findByName"
            parameterType="String"
            resultMap="UserResultMap"
    >
        select
            ut.name,
            ut.username,
            ut.email
        from
            user_tb ut
            left outer join student_tb st on(st.user_id = ut.user_id)
            left outer join teacher_tb tt on(tt.user_id = ut.user_id)
        where
            name = #{name} and email = #{email}
    </select>

    <select id="findPassword"
            parameterType="String"
            resultMap="UserResultMap"
    >
        select
            ut.name,
            ut.username,
            ut.email
        from
            user_tb ut
            left outer join student_tb st on(st.user_id = ut.user_id)
            left outer join teacher_tb tt on(tt.user_id = ut.user_id)
        where
            username = #{username} and email = #{email}
    </select>

    <update id="modifyPassword"
            parameterType="com.meeteam4.meeting.entity.User"
    >
        update
            user_tb
        set
            password = #{password},
            update_date = now()
        where
            username = #{username}
    </update>

</mapper>