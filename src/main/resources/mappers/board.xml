<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.meeteam4.meeting.repository.BoardMapper">

    <resultMap id="BoardResultMap" type="com.meeteam4.meeting.entity.StudentBoard">
        <id property="studentBoardId" column="student_board_id"/>
        <result property="studentId" column="student_id"/>
        <result property="nickname" column="nickname"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="theme" column="theme"/>
        <result property="userId" column="user_id"/>
        <result property="genderId" column="gender_id"/>
        <result property="viewCount" column="view_count"/>
        <result property="createDate" column="create_date"/>
        <result property="updateDate" column="update_date"/>
    </resultMap>

    <resultMap id="CommentResultMap" type="com.meeteam4.meeting.entity.StudentComment">
        <id property="studentCommentId" column="student_comment_id"/>
        <result property="studentBoardId" column="student_board_id"/>
        <result property="studentUserId" column="student_user_id"/>
        <result property="comment" column="comment"/>
        <result property="createDate" column="create_date"/>
        <result property="updateDate" column="update_date"/>
        <result property="userImgUrl" column="user_img_url"/>
    </resultMap>

    <resultMap id="BoardTcResultMap" type="com.meeteam4.meeting.entity.TeacherBoard">
        <id property="teacherBoardId" column="teacher_board_id"/>
        <result property="teacherId" column="teacher_id"/>
        <result property="userId" column="user_id"/>
        <result property="nickname" column="nickname"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="viewCount" column="view_count"/>
        <result property="genderId" column="gender_id"/>
        <result property="createDate" column="create_date"/>
        <result property="updateDate" column="update_date"/>
    </resultMap>

    <resultMap id="TeacherCommentResultMap" type="com.meeteam4.meeting.entity.TeacherComment">
        <id property="teacherCommentId" column="teacher_comment_id"/>
        <result property="teacherBoardId" column="teacher_board_id"/>
        <result property="teacherId" column="teacher_id"/>
        <result property="comment" column="comment"/>
        <result property="createDate" column="create_date"/>
        <result property="updateDate" column="update_date"/>
        <result property="userImgUrl" column="user_img_url"/>
    </resultMap>

    <resultMap id="BoardStudyResultMap" type="com.meeteam4.meeting.entity.StudyBoard">
        <id property="studyBoardId" column="study_board_id"/>
        <result property="userId" column="user_id"/>
        <result property="nickname" column="nickname"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="viewCount" column="view_count"/>
        <result property="genderId" column="gender_id"/>
        <result property="createDate" column="create_date"/>
        <result property="updateDate" column="update_date"/>
    </resultMap>

    <resultMap id="StudyCommentResultMap" type="com.meeteam4.meeting.entity.StudyComment">
        <id property="studyCommentId" column="study_comment_id"/>
        <result property="studyBoardId" column="study_board_id"/>
        <result property="userId" column="user_id"/>
        <result property="comment" column="comment"/>
        <result property="createDate" column="create_date"/>
        <result property="updateDate" column="update_date"/>
        <result property="userImgUrl" column="user_img_url"/>
    </resultMap>

    <resultMap id="BoardNoticeResultMap" type="com.meeteam4.meeting.entity.Notice">
        <id property="noticeId" column="notice_id"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="viewCount" column="view_count"/>
        <result property="createDate" column="create_date"/>
        <result property="updateDate" column="update_date"/>
    </resultMap>

    <resultMap id="DeclareResultMap" type="com.meeteam4.meeting.entity.Declaration">
        <id property="declareId" column="declare_id"/>
        <result property="userId" column="user_id"/>
        <result property="theme" column="theme"/>
        <result property="content" column="content"/>
        <result property="createDate" column="create_date"/>
    </resultMap>

    <resultMap id="GenderResultMap" type="com.meeteam4.meeting.entity.Gender">
        <id property="genderId" column="gender_id" />
        <result property="genderType" column="gender_type" />
    </resultMap>

    <resultMap id="UserResultMap" type="com.meeteam4.meeting.entity.User">
        <id property="userId" column="user_id" />
        <result property="name" column="name" />
        <result property="username" column="username" />
        <result property="password" column="password" />
        <result property="nickname" column="nickname" />
        <result property="genderType" column="gender_type" />
        <result property="email" column="email" />
        <result property="roleId" column="role_id" />
        <result property="createDate" column="create_date" />
        <result property="updateDate" column="update_date" />
        <result property="userImgUrl" column="user_img_url" />
        <association property="teacher" resultMap="TeacherResultMap"/>
        <association property="student" resultMap="StudentResultMap"/>
    </resultMap>

    <resultMap id="StudentResultMap" type="com.meeteam4.meeting.entity.Student">
        <id property="studentId" column="student_id" />
        <result property="userId" column="user_id"/>
        <result property="birthDate" column="birth_date"/>
        <result property="genderId" column="gender_id"/>
        <result property="genderType" column="gender_type"/>
        <result property="studentTypeId" column="student_type_id"/>
        <result property="phoneNumber" column="phone_number"/>
        <result property="regionId" column="region_id"/>
        <result property="createDate" column="create_date"/>
        <result property="updateDate" column="update_date"/>
    </resultMap>

    <resultMap id="TeacherResultMap" type="com.meeteam4.meeting.entity.Teacher">
        <id property="teacherId" column="teacher_id" />
        <result property="userId" column="user_id"/>
        <result property="birthDate" column="birth_date"/>
        <result property="genderId" column="gender_id"/>
        <result property="genderType" column="gender_type"/>
        <result property="universityId" column="university_id"/>
        <result property="departmentName" column="department_name"/>
        <result property="graduateStateId" column="graduate_state_id"/>
        <result property="phoneNumber" column="phone_number"/>
        <result property="createDate" column="create_date"/>
        <result property="updateDate" column="update_date"/>
    </resultMap>


    <insert id="saveBoard" parameterType="com.meeteam4.meeting.entity.StudentBoard">
        insert into student_board_tb
        values(
            0,
            #{studentId},
            #{nickname},
            #{title},
            #{content},
            #{viewCount},
            now(),
            now()
        )
    </insert>

    <select id="searchBoard" resultMap="BoardResultMap">
        select
            sbt.student_board_id,
            sbt.student_id,
            sbt.nickname,
            sbt.title,
            sbt.create_date,
            sbt.view_count,
            st.user_id,
            st.gender_id
        from
        student_board_tb sbt
        left outer join student_tb st on(st.student_id = sbt.student_id)
        left outer join user_tb ut on(ut.user_id = st.user_id)
        where
            1=1

        <choose>
        <when test="count != -1 ">
            and(
            title like concat('%', #{searchText},'%')
            )
        </when>
        </choose>
        order by
        sbt.create_date desc
        limit #{startIndex}, #{count}

    </select>

    <select id="getStudentCount" resultType="integer">
        select
            count(*)
        from
            student_board_tb
        where
        1=1
        <choose>
            <when test="count != -1 ">
                and(
                title like concat('%', #{searchText},'%')
                )
            </when>
        </choose>

    </select>

    <select id="getSingleBoard" resultMap="BoardResultMap">
        select
            student_board_id,
            nickname,
            title,
            create_date,
            content,
            view_count
        from
            student_board_tb
        where
            student_board_id = #{studentBoardId};

    </select>

    <select id="getStudentId" resultMap="BoardResultMap">
        select
            student_id
        from
            student_tb st
        left outer join user_tb ut on(ut.user_id = st.user_id)
        where
            ut.user_id = #{userId};

    </select>

    <select id="getStudentIdByStudentBoardId" resultMap="BoardResultMap">
        select
            student_id
        from
            student_board_tb
        where
            student_board_id = #{studentBoardId};

    </select>


    <delete id="deleteBoardByBoardId">
        delete
        from
            student_board_tb
        where
            student_board_id = #{studentBoardId}

    </delete>

    <update id="updateBoardByBoardId" parameterType="com.meeteam4.meeting.entity.StudentBoard">
        update
            student_board_tb
        set
            title = #{title},
            content = #{content},
            update_date = now()
        where
            student_board_id = #{studentBoardId}

    </update>

    <update id="updateBoardViewByBoardId" parameterType="com.meeteam4.meeting.entity.StudentBoard">
        update
            student_board_tb
        set
            view_count = view_count + 1
        where
            student_board_id = #{studentBoardId};

    </update>

    <update id="updateBoardViewByTeacherBoardId" parameterType="com.meeteam4.meeting.entity.TeacherBoard">
        update
            teacher_board_tb
        set
            view_count = view_count + 1
        where
            teacher_board_id = #{teacherBoardId};

    </update>

    <update id="updateBoardViewByStudyBoardId" parameterType="com.meeteam4.meeting.entity.StudyBoard">
        update
            study_board_tb
        set
            view_count = view_count + 1
        where
            study_board_id = #{studyBoardId};

    </update>

    <update id="updateBoardViewByNoticedId" parameterType="com.meeteam4.meeting.entity.Notice">
        update
            notice_tb
        set
            view_count = view_count + 1
        where
        notice_id = #{noticeId};

    </update>

    <insert id="saveComment" parameterType="com.meeteam4.meeting.entity.StudentComment">
        insert into
            student_comment_tb
        values(
            0,
            #{studentBoardId},
            #{studentUserId},
            #{nickname},
            #{comment},
            now(),
            now()
        )

    </insert>

    <select id="getStudentComment" resultMap="CommentResultMap">
        select
            sct.student_comment_id,
            sct.student_board_id,
            sct.student_user_id,
            sct.nickname,
            sct.comment,
            sct.create_date,
            ut.user_img_url
        from student_comment_tb sct
        left outer join student_tb st on(st.student_id = sct.student_user_id)
        left outer join user_tb ut on(ut.user_id = st.user_id)
        where
            sct.student_board_id = #{studentBoardId}
        order by
        sct.create_date desc

    </select>

    <delete id="deleteStudentCommentByCommentId">
        delete
        from
            student_comment_tb
        where
            student_comment_id = #{studentCommentId}

    </delete>

    <update id="updateCommentByCommentId" parameterType="com.meeteam4.meeting.entity.StudentComment">
        update
            student_comment_tb
        set
            comment = #{comment}
        where
            student_comment_id = #{studentCommentId}

    </update>


    <insert id="saveTeacherBoard" parameterType="com.meeteam4.meeting.entity.TeacherBoard">
        insert into
            teacher_board_tb
        values(
            0,
            #{teacherId},
            #{nickname},
            #{title},
            #{content},
            #{viewCount},
            now(),
            now()
            )
    </insert>

    <select id="searchTeacherBoard" resultMap="BoardTcResultMap">
        select
            tbt.teacher_board_id,
            tbt.teacher_id,
            tbt.nickname,
            tbt.title,
            tbt.content,
            tbt.view_count,
            tbt.create_date,
            tt.gender_id
        from
            teacher_board_tb tbt
        left outer join teacher_tb tt on(tt.teacher_id = tbt.teacher_id)
        left outer join user_tb ut on(ut.user_id = tt.user_id)
        where
            1=1
        <choose>
            <when test="count != -1 ">
                and(
                title like concat('%', #{searchText},'%')
                )
            </when>
        </choose>
        order by
            tbt.create_date desc
        limit #{startIndex}, #{count}

    </select>

    <select id="getTeacherCount" resultType="integer">
        select
            count(*)
        from
            teacher_board_tb
        where
            1=1
        <choose>
            <when test="count != -1 ">
                and(
                title like concat('%', #{searchText},'%')
                )
            </when>
        </choose>

    </select>

    <select id="getSingleTeacherBoard" resultMap="BoardTcResultMap">
        select
            teacher_board_id,
            nickname,
            title,
            create_date,
            content,
            view_count
        from
            teacher_board_tb
        where
            teacher_board_id = #{teacherBoardId};

    </select>

    <select id="getTeacherId" resultMap="BoardTcResultMap">
        select
            teacher_id
        from
            teacher_tb tt
        left outer join user_tb ut on(ut.user_id = tt.user_id)
        where
            ut.user_id = #{userId};

    </select>


    <select id="getTeacherIdByTeacherBoardId" resultMap="BoardTcResultMap">
        select
            teacher_id
        from
            teacher_board_tb
        where
            teacher_board_id = #{teacherBoardId};

    </select>

    <delete id="deleteTeacherBoardByBoardId">
        delete
        from
            teacher_board_tb
        where
            teacher_board_id = #{teacherBoardId}

    </delete>

    <update id="updateTeacherBoardByBoardId" parameterType="com.meeteam4.meeting.entity.TeacherBoard">
        update
            teacher_board_tb
        set
            title = #{title},
            content = #{content},
            update_date = now()
        where
            teacher_board_id = #{teacherBoardId}

    </update>

    <insert id="saveTeacherComment" parameterType="com.meeteam4.meeting.entity.TeacherComment">
        insert into
            teacher_comment_tb
        values(
            0,
            #{teacherBoardId},
            #{teacherId},
            #{nickname},
            #{comment},
            now(),
            now()
        )

    </insert>

    <select id="getTeacherComment" resultMap="TeacherCommentResultMap">
        select
            tct.teacher_comment_id,
            tct.teacher_board_id,
            tct.teacher_id,
            tct.nickname,
            tct.comment,
            tct.create_date,
            ut.user_img_url
        froteacher_comment_tb tct
        left outer join teacher_tb tt on(tt.teacher_id = tct.teacher_id)
        left outer join user_tb ut on(ut.user_id = tt.user_id)
        where
            tct.teacher_board_id = #{teacherBoardId}
        order by
        tct.create_date desc

    </select>

    <delete id="deleteTeacherCommentByCommentId">
        delete
        from
            teacher_comment_tb
        where
            teacher_comment_id = #{teacherCommentId}

    </delete>

    <update id="updateTeacherCommentByCommentId" parameterType="com.meeteam4.meeting.entity.TeacherComment">
        update
            teacher_comment_tb
        set
            comment = #{comment}
        where
            teacher_comment_id = #{teacherCommentId}

    </update>

    <insert id="saveStudyBoard" parameterType="com.meeteam4.meeting.entity.StudyBoard">
        insert into
            study_board_tb
        values(
            0,
            #{userId},
            #{nickname},
            #{title},
            #{content},
            #{viewCount},
            now(),
            now()
        )
    </insert>

    <select id="searchStudyBoard" resultMap="BoardStudyResultMap">
        SELECT
            sbt.study_board_id,
            sbt.user_id,
            sbt.nickname,
            sbt.title,
            sbt.content,
            sbt.view_count,
            sbt.create_date,
        CASE
            WHEN st.gender_id IS NOT NULL THEN st.gender_id
            ELSE tt.gender_id
            END AS gender_id
        FROM
            study_board_tb sbt
            LEFT OUTER JOIN student_tb st ON (st.user_id = sbt.user_id)
            LEFT OUTER JOIN teacher_tb tt ON (tt.user_id = sbt.user_id)
        WHERE
            1=1
        <choose>
            <when test="count != -1 ">
                and(
                title like concat('%', #{searchText},'%')
                )
            </when>
        </choose>
        order by
        sbt.create_date desc
        limit #{startIndex}, #{count}

    </select>

    <select id="getStudyCount" resultType="integer">
        select
            count(*)
        from
            study_board_tb
        where
            1=1
        <choose>
            <when test="count != -1 ">
                and(
                title like concat('%', #{searchText},'%')
                )
            </when>
        </choose>

    </select>

    <select id="getSingleStudyBoard" resultMap="BoardStudyResultMap">
        select
            study_board_id,
            title,
            nickname,
            create_date,
            content,
            view_count
        from
            study_board_tb
        where
            study_board_id = #{studyBoardId};

    </select>

    <select id="getUserIdByStudyBoardId" resultMap="BoardStudyResultMap">
        select
            user_id
        from
            study_board_tb
        where
            study_board_id = #{studyBoardId};

    </select>

    <delete id="deleteStudyBoardByBoardId">
        delete
        from
        study_board_tb
        where
        study_board_id = #{studyBoardId}

    </delete>

    <update id="updateStudyBoardByBoardId" parameterType="com.meeteam4.meeting.entity.StudyBoard">
        update
            study_board_tb
        set
            title = #{title},
            content = #{content},
            update_date = now()
        where
            study_board_id = #{studyBoardId}

    </update>




    <insert id="saveStudyComment" parameterType="com.meeteam4.meeting.entity.StudyComment">
        insert into
            study_comment_tb
        values(
            0,
            #{studyBoardId},
            #{userId},
            #{nickname},
            #{comment},
            now(),
            now()
        )

    </insert>

    <select id="getStudyComment" resultMap="StudyCommentResultMap">
        select
            sct.study_comment_id,
            sct.study_board_id,
            sct.user_id,
            sct.nickname,
            sct.comment,
            sct.create_date,
            ut.user_img_url
        from study_comment_tb sct
        left outer join user_tb ut on(ut.user_id = sct.user_id)
        where
            study_board_id =  #{studyBoardId}
        order by
        sct.create_date desc

    </select>

    <delete id="deleteStudyCommentByCommentId">
        delete
        from
            study_comment_tb
        where
            study_comment_id = #{studyCommentId}

    </delete>

    <update id="updateStudyCommentByCommentId" parameterType="com.meeteam4.meeting.entity.StudyComment">
        update
            study_comment_tb
        set
            comment = #{comment}
        where
            study_comment_id = #{studyCommentId}

    </update>


    <select id="searchNoticeBoard" resultMap="BoardNoticeResultMap">
        select
            notice_id,
            title,
            create_date,
            view_count
        from
            notice_tb
        where
        1=1
        <choose>
            <when test="count != -1 ">
                and(
                title like concat('%', #{searchText},'%')
                )
            </when>
        </choose>
        limit #{startIndex}, #{count}

    </select>

    <select id="getNoticeCount" resultType="integer">
        select
            count(*)
        from
            notice_tb
        where
        1=1
        <choose>
            <when test="count != -1 ">
                and(
                title like concat('%', #{searchText},'%')
                )
            </when>
        </choose>

    </select>

    <select id="getSingleNoticeBoard" resultMap="BoardNoticeResultMap">
        select
            notice_id,
            title,
            create_date,
            content,
            view_count,
            update_date
        from
            notice_tb
        where
            notice_id = #{noticeId};

    </select>

    <insert id="saveDeclare" parameterType="com.meeteam4.meeting.entity.Declaration">
        insert into
            declare_tb
        values(
            0,
            #{userId},
            #{studentBoardId},
            #{theme},
            #{content},
            now()
        )
    </insert>

    <insert id="saveStudentCommentDeclare" parameterType="com.meeteam4.meeting.entity.Declaration">
        insert into
            comment_declare_tb
        values(
            0,
            #{userId},
            #{studentCommentId},
            #{theme},
            #{content},
            now()
        )
    </insert>


    <insert id="saveTeacherDeclare" parameterType="com.meeteam4.meeting.entity.Declaration">
        insert into
            teacher_declare_tb
        values(
            0,
            #{userId},
            #{teacherBoardId},
            #{theme},
            #{content},
            now()
        )
    </insert>

    <insert id="saveTeacherCommentDeclare" parameterType="com.meeteam4.meeting.entity.Declaration">
        insert into
            teacher_comment_declare_tb
        values(
            0,
            #{userId},
            #{teacherCommentId},
            #{theme},
            #{content},
            now()
        )
    </insert>

    <insert id="saveStudyDeclare" parameterType="com.meeteam4.meeting.entity.Declaration">
        insert into
        study_declare_tb
        values(
        0,
        #{userId},
        #{studyBoardId},
        #{theme},
        #{content},
        now()
        )
    </insert>

    <insert id="saveStudyCommentDeclare" parameterType="com.meeteam4.meeting.entity.Declaration">
        insert into
        study_comment_declare_tb
        values(
        0,
        #{userId},
        #{studyCommentId},
        #{theme},
        #{content},
        now()
        )
    </insert>

    <select id="getBoardGenderImg" resultMap="StudentResultMap">
        select
            gt.gender_type
        from
            student_tb st
        left outer join gender_tb gt on(gt.gender_id = st.gender_id)
        where
            student_id = #{studentId};
    </select>

    <select id="getTeacherBoardGenderImg" resultMap="TeacherResultMap">
        select
            gt.gender_type
        from
            teacher_tb tt
        left outer join gender_tb gt on(gt.gender_id = tt.gender_id)
        where
            teacher_id = #{teacherId};
    </select>


    <select id="getUserBoardGenderImg" resultMap="UserResultMap">
        SELECT
        g.gender_type
        FROM user_tb u
        LEFT JOIN student_tb s ON u.user_id = s.user_id
        LEFT JOIN teacher_tb t ON u.user_id = t.user_id
        JOIN gender_tb g ON CASE
        WHEN s.student_id IS NOT NULL THEN s.gender_id
        WHEN t.teacher_id IS NOT NULL THEN t.gender_id
        ELSE NULL
        END = g.gender_id
        WHERE u.user_id = #{userId};
    </select>

    <select id="getUserNickname" resultMap="UserResultMap">
        select
            nickname
        from
            user_tb
        where
            user_id = #{userId};
    </select>

    <select id="getTeacherNickname" resultMap="UserResultMap">
        select
        nickname
        from
        user_tb
        where
        user_id = #{userId};
    </select>


</mapper>